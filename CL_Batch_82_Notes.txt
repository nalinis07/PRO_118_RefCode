TA


============================


  handleTransaction = async () => {
    var { bookId, studentId } = this.state;
    await this.getBookDetails(bookId);
    var { bookName1, studentName1 } = this.state;
    console.log ("..", bookName1, studentName1)
    await this.getStudentDetails(studentId);

    var transactionType = await this.checkBookAvailability(bookId);
    console.log("transaction type :", transactionType)
         if (!transactionType) {
      this.setState({ bookId: "", studentId: "" });
      // For Android users only
      // ToastAndroid.show("The book doesn't exist in the library database!", ToastAndroid.SHORT);
      //Alert.alert("The book doesn't exist in the library database!");
      alert("The book doesn't exist in the library database!");
    } 
    else if (transactionType === "issue") {
           var isEligible = await this.checkStudentEligibilityForBookIssue(
        studentId
      );

      if (isEligible) {
        var { bookName, studentName } = this.state;
        this.initiateBookIssue(bookId, studentId, bookName, studentName);
        // For Android users only
      // ToastAndroid.show("Book issued to the student!", ToastAndroid.SHORT);
      //Alert.alert("Book issued to the student!");
      alert("Book issued to the student!");
      }
      
        } else {
         var isEligible = await this.checkStudentEligibilityForBookReturn(
        bookId,
        studentId
      );

      if (isEligible) {
        var { bookName, studentName } = this.state;
        this.initiateBookReturn(bookId, studentId, bookName, studentName);
        
       // For Android users only
       // ToastAndroid.show("Book returned to the library!", ToastAndroid.SHORT);
       //Alert.alert("Book returned to the library!");
        alert("Book returned to the library!");
      }
    }
      
  };
================================
checkStudentEligibilityForBookIssue = async studentId => {
    const studentRef = await db
      .collection("students")
      .where("student_Id", "==", studentId)
      .get();

    var isStudentEligible = "";
    if (studentRef.docs.length == 0) {
      this.setState({
        bookId: "",
        studentId: ""
      });
      isStudentEligible = false;
      //Alert.alert("The student id doesn't exist in the database!");
      alert("The student id doesn't exist in the database!");
    } else {
      studentRef.docs.map(doc => {
        if (doc.data().number_of_books_issued < 2) {
          isStudentEligible = true;
        } else {
          isStudentEligible = false;
          //Alert.alert("The student has already issued 2 books!");
            alert("The student has already issued 2 books!");
          this.setState({
            bookId: "",
            studentId: ""
          });
        }
      });
    }

    return isStudentEligible;
  };
  
  ==================
SA
 checkStudentEligibilityForBookReturn = async (bookId, studentId) => {
    const transactionRef = await db
      .collection("transactions")
      .where("book_id", "==", bookId)
      .limit(1)
      .get();
    var isStudentEligible = "";
    transactionRef.docs.map(doc => {
      var lastBookTransaction = doc.data();
      if (lastBookTransaction.student_id === studentId) {
        isStudentEligible = true;
      } else {
        isStudentEligible = false;
        //Alert.alert("The book wasn't issued by this student!");
        alert("The book wasn't issued by this student!");
        this.setState({
          bookId: "",
          studentId: ""
        });
      }
    });
    return isStudentEligible;
  };
  
  